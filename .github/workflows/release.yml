name: Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 安装Rust工具链
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config

      - name: 构建应用
        run: |
          # 设置release配置
          mkdir -p ~/.cargo
          cat > ~/.cargo/config << EOF
          [profile.release]
          lto = true
          opt-level = "z"
          codegen-units = 1
          panic = "abort"
          EOF
          
          # 显示依赖树
          cargo tree
          
          # 构建应用
          cargo build --release

      - name: 准备发布文件
        run: |
          mkdir -p release
          
          # 复制编译产物
          if [ -f "target/release/lycrex-home" ]; then
            cp target/release/lycrex-home release/
            echo "成功找到编译产物"
          else
            echo "在标准位置未找到编译产物，尝试查找其他位置..."
            BINARY=$(find target -name "lycrex-home" -type f -executable | head -n 1)
            if [ -n "$BINARY" ]; then
              cp "$BINARY" release/
              echo "找到编译产物: $BINARY"
            else
              echo "无法找到lycrex-home可执行文件，构建可能失败"
              exit 1
            fi
          fi
          
          # 创建压缩包
          cd release && tar -czf lycrex-home-linux-x86_64.tar.gz lycrex-home
          cd ..

      - name: 获取版本信息
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 获取提交信息
        id: get_commits
        run: |
          # 确保获取完整的标签和历史
          git fetch --prune --unshallow --tags
          
          # 获取当前标签
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          
          # 获取所有标签并按版本排序
          ALL_TAGS=$(git tag -l --sort=-v:refname)
          
          # 查找当前标签之前的标签
          PREVIOUS_TAG=""
          FOUND_CURRENT=false
          for tag in $ALL_TAGS; do
            if [ "$FOUND_CURRENT" = true ]; then
              PREVIOUS_TAG=$tag
              break
            fi
            if [ "$tag" = "$CURRENT_TAG" ]; then
              FOUND_CURRENT=true
            fi
          done
          
          echo "当前标签: $CURRENT_TAG, 上一个标签: $PREVIOUS_TAG"
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # 如果没有之前的标签，获取所有提交
            COMMITS=$(git log --pretty=format:"* %s (%h)" $CURRENT_TAG)
          else
            # 获取从上一个标签到当前标签的所有提交
            COMMITS=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG)
          fi
          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 创建发布
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            release/lycrex-home-linux-x86_64.tar.gz
          body: |
            ${{ steps.get_commits.outputs.COMMITS }}
            
  deploy:
    name: 部署到服务器
    needs: build-and-release
    runs-on: ubuntu-latest
    environment: server-hk0
    steps:
      - name: 下载发布的压缩包
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            for (const asset of release.data.assets) {
              if (asset.name === 'lycrex-home-linux-x86_64.tar.gz') {
                const response = await github.request(asset.browser_download_url, {
                  headers: {
                    'Accept': 'application/octet-stream'
                  },
                  request: {
                    raw: true
                  }
                });
                
                fs.writeFileSync('lycrex-home-linux-x86_64.tar.gz', Buffer.from(response.data));
                console.log('下载完成: lycrex-home-linux-x86_64.tar.gz');
                break;
              }
            }
            
      - name: 解压文件
        run: |
          mkdir -p deploy
          tar -xzf lycrex-home-linux-x86_64.tar.gz -C deploy
          chmod +x deploy/lycrex-home
          
      - name: 创建systemd服务文件
        run: |
          cat > deploy/lycrex-home.service << EOF
          [Unit]
          Description=Lycrex Home Service
          After=network.target
          
          [Service]
          Type=simple
          User=root
          WorkingDirectory=/opt/lycrex-home
          ExecStart=/opt/lycrex-home/lycrex-home
          Restart=on-failure
          RestartSec=5
          
          [Install]
          WantedBy=multi-user.target
          EOF
      
      - name: 部署到服务器
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ vars.SERVER_PORT }}
          source: "deploy/*"
          target: "/tmp/lycrex-deploy"
          
      - name: 安装和重启服务
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ vars.SERVER_PORT }}
          script: |
            # 创建安装目录
            sudo mkdir -p /opt/lycrex-home
            
            # 复制二进制文件
            sudo cp /tmp/lycrex-deploy/deploy/lycrex-home /opt/lycrex-home/
            
            # 复制和启用systemd服务
            sudo cp /tmp/lycrex-deploy/deploy/lycrex-home.service /etc/systemd/system/
            sudo systemctl daemon-reload
            
            # 启动或重启服务
            if sudo systemctl is-active --quiet lycrex-home; then
              echo "重启服务..."
              sudo systemctl restart lycrex-home
            else
              echo "启用并启动服务..."
              sudo systemctl enable lycrex-home
              sudo systemctl start lycrex-home
            fi
            
            # 检查服务状态
            sudo systemctl status lycrex-home
            
            # 清理临时文件
            rm -rf /tmp/lycrex-deploy 